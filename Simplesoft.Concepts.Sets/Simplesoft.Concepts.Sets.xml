<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simplesoft.Concepts.Sets</name>
    </assembly>
    <members>
        <member name="T:Simplesoft.Concepts.Sets.Association`2">
            <summary>
            Represents an association between an element of an input set (input) and an element of an argument set (output).
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.Association`2.#ctor(`0,`1)">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.Association`2"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.Association`2.Input">
            <summary>
            Gets the input.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.Association`2.Output">
            <summary>
            Gets the output.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IEnumerator`1">
            <summary>
            Represents an enumerator of elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions">
            <summary>
            Provides exceptions for get accessor of <see cref="P:Simplesoft.Concepts.Sets.IEnumerator`1.Current"/> property.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.NotStartedException">
            <summary>
            Represents the exception that is thrown when the current element of an <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> is accessed when the <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> is not started.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.NotStartedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.NotStartedException"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.ExhaustedException">
            <summary>
            Represents the exception that is thrown when the current element of an <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> is accessed when the <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> is exhausted.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.ExhaustedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.ExhaustedException"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IEnumerator`1.Current">
            <summary>
            Gets the current element of the <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/>.
            </summary>
            <exception cref="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.NotStartedException"/>
            <exception cref="T:Simplesoft.Concepts.Sets.IEnumerator`1.CurrentPropertyGetAccessorExceptions.ExhaustedException"/>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IEnumerator`1.MoveNext">
            <summary>
            Sets the next element of the enumeration as current.
            </summary>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> is not exhausted yet and the next element is set; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IFunction`2">
            <summary>
            Represents a relation between elements of an input set (inputs) and elements of an output set (outputs).
            </summary>
            <typeparam name="TInput">The type of the inputs.</typeparam>
            <typeparam name="TOutput">The type of the outputs.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IFunction`2.ClearEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.ClearEvent"/>.
            </summary>
            <param name="function">The <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.ClearEvent"/> has happened to.</param>
            <param name="count">The number of removed elements.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IFunction`2.RemoveEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.RemoveEvent"/>.
            </summary>
            <param name="function">The <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.RemoveEvent"/> has happened to.</param>
            <param name="input">The input of the association that is removed from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.</param>
            <param name="output">The output of the association that is removed from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IFunction`2.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.IEditor.Clear">
            <summary>
            Removes all the associations from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> and causes the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.ClearEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.IEditor.TryRemoveAt(System.Int64,`0@,`1@)">
            <summary>
            Removes an association at an address from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.RemoveEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains the association at the address.
            </summary>
            <param name="address">The address.</param>
            <param name="input">The input of the association if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains the association at <paramref name="address"/>; otherwise, the default value.</param>
            <param name="output">The output of the association if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains the association at <paramref name="address"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the association is removed from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.IEditor.TryRemoveInput(`0,`1@,System.Int64)">
            <summary>
            Removes an association to an input from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.RemoveEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to the input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, the default value.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.IEditor.TryRemoveOutput(`1,`0@,System.Int64)">
            <summary>
            Removes an association with an output from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IFunction`2.RemoveEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association with the output.
            </summary>
            <param name="output">The output.</param>
            <param name="input">The input if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association with <paramref name="output"/>; otherwise, the default value.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association with <paramref name="output"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association with <paramref name="output"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IFunction`2.Count">
            <summary>
            Gets the number of associations of the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IFunction`2.AssociationSequence">
            <summary>
            Gets an <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of the associations of the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IFunction`2.ClearEvent">
            <summary>
            Occurs when all association are removed from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IFunction`2.RemoveEvent">
            <summary>
            Occurs when an association is removed from the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.TryGetAddress(`0,System.Int64@)">
            <summary>
            Gets an address of an association to an input in the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to the input.
            </summary>
            <param name="input">The input.</param>
            <param name="address">The address of the association if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.TryGetAt(System.Int64,`0@,`1@)">
            <summary>
            Gets an association at an address in the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association at the address.
            </summary>
            <param name="address">The address.</param>
            <param name="input">The input of the association if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association at <paramref name="address"/>; otherwise, the default value.</param>
            <param name="output">The output of the association if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association at <paramref name="address"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association at <paramref name="address"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.TryGetOutput(`0,`1@)">
            <summary>
            Gets an output associated to an input in the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to the input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output of the association if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains an association to <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IFunction`2.TryGetInput(`1,`0@)">
            <summary>
            Gets an input an output associated to if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains the association.
            </summary>
            <param name="output">The output.</param>
            <param name="input">The input if the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains the association; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> contains the association; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IInjection`2">
            <summary>
            Represents an <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> where an output can be associated to a number of inputs.
            </summary>
            <typeparam name="TInput">The type of the inputs.</typeparam>
            <typeparam name="TOutput">The type of the outputs.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IInjection`2.AddEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IInjection`2.AddEvent"/>.
            </summary>
            <param name="injection">The <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/> the <see cref="E:Simplesoft.Concepts.Sets.IInjection`2.AddEvent"/> has happened to.</param>
            <param name="input">The input of the association that is added to the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>.</param>
            <param name="output">The output of the association that is added to the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IInjection`2.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAddMethodExceptions">
            <summary>
            Provides exceptions for <see cref="M:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAdd(`0,`1,System.Int64@)"/> method.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAddMethodExceptions.OverflowedException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/> contains the maximum number of elements.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAddMethodExceptions.OverflowedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAddMethodExceptions.OverflowedException"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAdd(`0,`1,System.Int64@)">
            <summary>
            Adds an association between an input and an output to the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IInjection`2.AddEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/> does not contain the output associated to the input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/> if the association is added; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the association is added to the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:Simplesoft.Concepts.Sets.IInjection`2.IEditor.TryAddMethodExceptions.OverflowedException"/>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IInjection`2.AddEvent">
            <summary>
            Occurs when an association is added to the <see cref="T:Simplesoft.Concepts.Sets.IInjection`2"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IIntegerFunction">
            <summary>
            Represents an <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> where the input set and the output set are the sets of integers.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IIntegerFunction.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IIntegerFunction.AscendingByInputsSequence">
            <summary>
            Gets an ascending by inputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IIntegerFunction.DescendingByInputsSequence">
            <summary>
            Gets a descending by inputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IIntegerFunction.AscendingByOutputsSequence">
            <summary>
            Gets an ascending by outputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IIntegerFunction.DescendingByOutputsSequence">
            <summary>
            Gets a descending by outputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.GetAscendingByInputsSequenceWithinInterval(Simplesoft.IntegerInterval)">
            <summary>
            Gets an ascending by inputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within an <see cref="T:Simplesoft.IntegerInterval"/>.
            </summary>
            <param name="interval">The <see cref="T:Simplesoft.IntegerInterval"/>.</param>
            <returns>An ascending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.GetDescendingByInputsSequenceWithinInterval(Simplesoft.IntegerInterval)">
            <summary>
            Gets a descending by inputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within an <see cref="T:Simplesoft.IntegerInterval"/>.
            </summary>
            <param name="interval">The <see cref="T:Simplesoft.IntegerInterval"/>.</param>
            <returns>A descending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.GetAscendingByOutputsSequenceWithinInterval(Simplesoft.IntegerInterval)">
            <summary>
            Gets an ascending by outputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within an <see cref="T:Simplesoft.IntegerInterval"/>.
            </summary>
            <param name="interval">The <see cref="T:Simplesoft.IntegerInterval"/>.</param>
            <returns>An ascending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.GetDescendingByOutputsSequenceWithinInterval(Simplesoft.IntegerInterval)">
            <summary>
            Gets a descending by outputs <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within an <see cref="T:Simplesoft.IntegerInterval"/>.
            </summary>
            <param name="interval">The <see cref="T:Simplesoft.IntegerInterval"/>.</param>
            <returns>A descending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> within <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.TryGetNotLessThanByInputs(System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Gets an associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> input of which is greater than or equal to a threshold integer if the association exists.
            </summary>
            <param name="threshold">The threshold integer.</param>
            <param name="input">The input of the association if the association exists; otherwise, the default value.</param>
            <param name="output">The output of the association if the association exists; otherwise, the default value.</param>
            <returns><see langword="true"/> if the association exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.TryGetNotGreaterThanByInputs(System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Gets an associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> input of which is less than or equal to a threshold integer if the association exists.
            </summary>
            <param name="threshold">The threshold integer.</param>
            <param name="input">The input of the association if the association exists; otherwise, the default value.</param>
            <param name="output">The output of the association if the association exists; otherwise, the default value.</param>
            <returns><see langword="true"/> if the association exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.TryGetNotLessThanByOutputs(System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Gets an associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> output of which is greater than or equal to a threshold integer if the association exists.
            </summary>
            <param name="threshold">The threshold integer.</param>
            <param name="input">The input of the association if the association exists; otherwise, the default value.</param>
            <param name="output">The output of the association if the association exists; otherwise, the default value.</param>
            <returns><see langword="true"/> if the association exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerFunction.TryGetNotGreaterThanByOutputs(System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Gets an associations of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerFunction"/> output of which is less than or equal to a threshold integer if the association exists.
            </summary>
            <param name="threshold">The threshold integer.</param>
            <param name="input">The input of the association if the association exists; otherwise, the default value.</param>
            <param name="output">The output of the association if the association exists; otherwise, the default value.</param>
            <returns><see langword="true"/> if the association exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IIntegerSubset">
            <summary>
            Represents an <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> of integers.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IIntegerSubset.AscendingSequence">
            <summary>
            Gets an ascending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of elements of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IIntegerSubset.DescendingSequence">
            <summary>
            Gets a descending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of elements of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerSubset.GetAscendingSequenceWithinInterval(Simplesoft.IntegerInterval)">
            <summary>
            Gets an ascending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of elements of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/> within an <see cref="T:Simplesoft.IntegerInterval"/>.
            </summary>
            <param name="interval">The <see cref="T:Simplesoft.IntegerInterval"/>.</param>
            <returns>An ascending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of elements of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/> within <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerSubset.GetDescendingSequenceWithinInterval(Simplesoft.IntegerInterval)">
            <summary>
            Gets a descending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of elements of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/> within an <see cref="T:Simplesoft.IntegerInterval"/>.
            </summary>
            <param name="interval">The <see cref="T:Simplesoft.IntegerInterval"/>.</param>
            <returns>A descending <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of elements of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/> within <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerSubset.TryGetNotLessThan(System.Int64,System.Int64@)">
            <summary>
            Gets an element of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/> that is greater than or equal to a threshold integer if the element exists.
            </summary>
            <param name="threshold">The threshold integer.</param>
            <param name="element">The element if exists; otherwise, the default value.</param>
            <returns><see langword="true"/> if the element exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IIntegerSubset.TryGetNotGreaterThan(System.Int64,System.Int64@)">
            <summary>
            Gets an element of the <see cref="T:Simplesoft.Concepts.Sets.IIntegerSubset"/> that is less than or equal to a threshold integer if the element exists.
            </summary>
            <param name="threshold">The threshold integer.</param>
            <param name="element">The element if exists; otherwise, the default value.</param>
            <returns><see langword="true"/> if the element exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1">
            <summary>
            Represents an order of elements of a set.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1.ClearEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IOrder`1.ClearEvent"/>.
            </summary>
            <param name="order">The <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IOrder`1.ClearEvent"/> has happened to.</param>
            <param name="count">The number of removed elements.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1.ItemPropertyGetAccessorExceptions">
            <summary>
            Provides exceptions for get accessor of Item property.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1.ItemPropertyGetAccessorExceptions.OffsetInvalidException">
            <summary>
            Represents the exception that is thrown when the offset argument value is greater than or equal to the number of elements of the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IOrder`1.ItemPropertyGetAccessorExceptions.OffsetInvalidException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1.ItemPropertyGetAccessorExceptions.OffsetInvalidException"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1.IEditor.ItemPropertySetAccessorExceptions">
            <summary>
            Provides exceptions for get accessor of Item property.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IOrder`1.IEditor.ItemPropertySetAccessorExceptions.OffsetInvalidException">
            <summary>
            Represents the exception that is thrown when the offset argument value is greater than or equal to the number of elements of the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IOrder`1.IEditor.ItemPropertySetAccessorExceptions.OffsetInvalidException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1.IEditor.ItemPropertySetAccessorExceptions.OffsetInvalidException"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IOrder`1.IEditor.Item(Simplesoft.NonNegativeInteger)">
            <summary>
            Sets an element at an offset from the beginning of the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
            <param name="offset">The offset.</param>
            <exception cref="T:Simplesoft.Concepts.Sets.IOrder`1.IEditor.ItemPropertySetAccessorExceptions.OffsetInvalidException"/>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IOrder`1.IEditor.Clear">
            <summary>
            Removes all the elements from the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/> and causes the <see cref="E:Simplesoft.Concepts.Sets.IOrder`1.ClearEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IOrder`1.ElementSequence">
            <summary>
            Gets the <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of the elements of the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IOrder`1.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.IOrder`1.Item(Simplesoft.NonNegativeInteger)">
            <summary>
            Gets an element at an offset from the beginning of the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
            <param name="offset">The offset.</param>
            <exception cref="T:Simplesoft.Concepts.Sets.IOrder`1.ItemPropertyGetAccessorExceptions.OffsetInvalidException"/>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IOrder`1.ClearEvent">
            <summary>
            Occurs when all elements are removed from the <see cref="T:Simplesoft.Concepts.Sets.IOrder`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1">
            <summary>
            Represents an order of elements implemented as a ring.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.RemoveBackEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.RemoveBackEvent"/>.
            </summary>
            <param name="ring">The <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.RemoveBackEvent"/> has happened to.</param>
            <param name="element">The element that is removed from the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.RemoveFrontEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.RemoveFrontEvent"/>.
            </summary>
            <param name="ring">The <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.RemoveFrontEvent"/> has happened to.</param>
            <param name="element">The element that is removed from the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.AddBackEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.AddBackEvent"/>.
            </summary>
            <param name="ring">The <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.AddBackEvent"/> has happened to.</param>
            <param name="element">The element that is added to the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.AddFrontEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.AddFrontEvent"/>.
            </summary>
            <param name="ring">The <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.AddFrontEvent"/> has happened to.</param>
            <param name="element">The element that is added to the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFrontMethodExceptions">
            <summary>
            Provides exceptions for <see cref="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFront(`0)"/> method.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFrontMethodExceptions.OverflowedException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> contains the maximum number of elements.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFrontMethodExceptions.OverflowedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFrontMethodExceptions.OverflowedException"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBackMethodExceptions">
            <summary>
            Provides exceptions for <see cref="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBack(`0)"/> method.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBackMethodExceptions.OverflowedException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> contains the maximum number of elements.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBackMethodExceptions.OverflowedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBackMethodExceptions.OverflowedException"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.RemoveBack(`0@)">
            <summary>
            Removes an element from the end of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.RemoveFrontEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.RemoveFront(`0@)">
            <summary>
            Removes an element from the beginning of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.RemoveFrontEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBack(`0)">
            <summary>
            Adds an element at the end of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> and causes the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.AddBackEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddBackMethodExceptions.OverflowedException"/>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFront(`0)">
            <summary>
            Adds an element at the beginning of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/> and causes the <see cref="E:Simplesoft.Concepts.Sets.IRing`1.AddFrontEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:Simplesoft.Concepts.Sets.IRing`1.IEditor.AddFrontMethodExceptions.OverflowedException"/>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IRing`1.RemoveBackEvent">
            <summary>
            Occurs when an element is removed from the end of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IRing`1.RemoveFrontEvent">
            <summary>
            Occurs when an element is removed from the beginning of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IRing`1.AddBackEvent">
            <summary>
            Occurs when an element is added at the end of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IRing`1.AddFrontEvent">
            <summary>
            Occurs when an element is added at the beginning of the <see cref="T:Simplesoft.Concepts.Sets.IRing`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISequence`1">
            <summary>
            Represents a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.ISequence`1.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISequence`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> of the elements of the <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/>.
            </summary>
            <returns>An <see cref="T:Simplesoft.Concepts.Sets.IEnumerator`1"/> of the elements of the <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/>.</returns>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IStack`1">
            <summary>
            Represents an order of elements implemented as a stack.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IStack`1.RemoveEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IStack`1.RemoveEvent"/>.
            </summary>
            <param name="stack">The <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IStack`1.RemoveEvent"/> has happened to.</param>
            <param name="element">The element that is removed from the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IStack`1.AddEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.IStack`1.AddEvent"/>.
            </summary>
            <param name="stack">The <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> the <see cref="E:Simplesoft.Concepts.Sets.IStack`1.AddEvent"/> has happened to.</param>
            <param name="element">The element that is added to the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IStack`1.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IStack`1.IEditor.AddMethodExceptions">
            <summary>
            Provides exceptions for <see cref="M:Simplesoft.Concepts.Sets.IStack`1.IEditor.Add(`0)"/> method.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.IStack`1.IEditor.AddMethodExceptions.OverflowedException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> contains the maximum number of elements.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IStack`1.IEditor.AddMethodExceptions.OverflowedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.IStack`1.IEditor.AddMethodExceptions.OverflowedException"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IStack`1.IEditor.Remove(`0@)">
            <summary>
            Removes an element from the end of the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.IStack`1.RemoveEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.IStack`1.IEditor.Add(`0)">
            <summary>
            Adds an element at the end of the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/> and causes the <see cref="E:Simplesoft.Concepts.Sets.IStack`1.AddEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:Simplesoft.Concepts.Sets.IStack`1.IEditor.AddMethodExceptions.OverflowedException"/>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IStack`1.RemoveEvent">
            <summary>
            Occurs when an element is removed from the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.IStack`1.AddEvent">
            <summary>
            Occurs when an element is added to the <see cref="T:Simplesoft.Concepts.Sets.IStack`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1">
            <summary>
            Represents a subset of elements of a set.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1.ClearEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.ClearEvent"/>.
            </summary>
            <param name="subset">The <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.ClearEvent"/> has happened to.</param>
            <param name="count">The number of removed elements.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1.RemoveEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.RemoveEvent"/>.
            </summary>
            <param name="subset">The <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.RemoveEvent"/> has happened to.</param>
            <param name="element">The element that is removed from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.</param>
            <param name="address">The address of <paramref name="element"/> in the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1.AddEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.AddEvent"/>.
            </summary>
            <param name="subset">The <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.AddEvent"/> has happened to.</param>
            <param name="element">The element that is added to the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.</param>
            <param name="address">The address of <paramref name="element"/> in the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryAddMethodExceptions">
            <summary>
            Provides exceptions for <see cref="M:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryAdd(`0,System.Int64@)"/> method.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryAddMethodExceptions.OverflowedException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the maximum number of elements.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryAddMethodExceptions.OverflowedException.#ctor">
            <summary>
            Initializes the <see cref="T:System.OverflowException"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.IEditor.Clear">
            <summary>
            Removes all the elements from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> and causes the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.ClearEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryRemoveAt(System.Int64,`0@)">
            <summary>
            Removes an element at an address from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.RemoveEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element at the address.
            </summary>
            <param name="address">The address.</param>
            <param name="element">The element if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element at <paramref name="address"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryRemove(`0,System.Int64@)">
            <summary>
            Removes an element from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.RemoveEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of <paramref name="element"/> in the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if <paramref name="element"/> is removed from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether <paramref name="element"/> is removed from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryAdd(`0,System.Int64@)">
            <summary>
            Adds an element to the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.ISubset`1.AddEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> does not contain the element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of <paramref name="element"/> in the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if <paramref name="element"/> is added to the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether <paramref name="element"/> is added to the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:Simplesoft.Concepts.Sets.ISubset`1.IEditor.TryAddMethodExceptions.OverflowedException"/>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.ISubset`1.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="P:Simplesoft.Concepts.Sets.ISubset`1.ElementSequence">
            <summary>
            Gets an <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of the elements of the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.ISubset`1.ClearEvent">
            <summary>
            Occurs when all elements are removed from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.ISubset`1.RemoveEvent">
            <summary>
            Occurs when an element is removed from the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.ISubset`1.AddEvent">
            <summary>
            Occurs when an element is added to the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.TryGetAddress(`0,System.Int64@)">
            <summary>
            Gets an address of an element in the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of <paramref name="element"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains <paramref name="element"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISubset`1.TryGetAt(System.Int64,`0@)">
            <summary>
            Gets an element at an address in the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element at the address.
            </summary>
            <param name="address">The address.</param>
            <param name="element">The element if the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element at <paramref name="address"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Simplesoft.Concepts.Sets.ISubset`1"/> contains the element at <paramref name="address"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISurjection`2">
            <summary>
            Represents an <see cref="T:Simplesoft.Concepts.Sets.IFunction`2"/> where an output can be associated to a number of inputs.
            </summary>
            <typeparam name="TInput">The type of the inputs.</typeparam>
            <typeparam name="TOutput">The type of the outputs.</typeparam>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISurjection`2.AddEventResponder">
            <summary>
            References a method that responds to the <see cref="E:Simplesoft.Concepts.Sets.ISurjection`2.AddEvent"/>.
            </summary>
            <param name="surjection">The <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/> the <see cref="E:Simplesoft.Concepts.Sets.ISurjection`2.AddEvent"/> has happened to.</param>
            <param name="input">The input of the association that is added to the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>.</param>
            <param name="output">The output of the association that is added to the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>.</param>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISurjection`2.IEditor">
            <summary>
            Represents an editor of an <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAddMethodExceptions">
            <summary>
            Provides exceptions for <see cref="M:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAdd(`0,`1,System.Int64@)"/> method.
            </summary>
        </member>
        <member name="T:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAddMethodExceptions.OverflowedException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/> contains the maximum number of elements.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAddMethodExceptions.OverflowedException.#ctor">
            <summary>
            Initializes the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAddMethodExceptions.OverflowedException"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAdd(`0,`1,System.Int64@)">
            <summary>
            Adds an association between an input and an output to the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>, causes the <see cref="E:Simplesoft.Concepts.Sets.ISurjection`2.AddEvent"/> on the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/> if the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/> does not contain an association to the input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="address">The address of the association in the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/> if the association is added; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the association is added to the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:Simplesoft.Concepts.Sets.ISurjection`2.IEditor.TryAddMethodExceptions.OverflowedException"/>
        </member>
        <member name="E:Simplesoft.Concepts.Sets.ISurjection`2.AddEvent">
            <summary>
            Occurs when an association is added to the <see cref="T:Simplesoft.Concepts.Sets.ISurjection`2"/>.
            </summary>
        </member>
        <member name="M:Simplesoft.Concepts.Sets.ISurjection`2.TryGetInputs(`1)">
            <summary>
            Gets an <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of inputs an output associated to.
            </summary>
            <param name="output">The output.</param>
            <returns>An <see cref="T:Simplesoft.Concepts.Sets.ISequence`1"/> of inputs an output associated to.</returns>
        </member>
    </members>
</doc>
